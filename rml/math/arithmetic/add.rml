import 'rml/utility'.

define add: 
        
    define appendDigitWithCarry:
	    9, 'c' space = 'c' 0 space;
	    1 a, 'c' space = 'c' inc(a) space;
	    1 a, $space = 'c' a space;
	    a, 'c' space = inc(a) space;
	    a, $space = a space.
        
    define clearCarry:
        'c' space = '1' space;
        space = space.
        
    define stripLeadingZeros:
    	'0+' $n = '0' n;
    	$n = n.
        
    define naiveAdd:
        a, 0 = a;
        a, b = naiveAdd(inc(a), dec(b)).
        
    define addDecimals:
        whole, 'c' part = clearCarry(
            appendDigitWithCarry(
                clearCarry(whole), 'c.' part
            )
        );
        whole, part = clearCarry(whole) '.' part;
        a, b, c, d = addDecimals(
            add(a, c, ''), 
            add(padWithZeros(b, d), padWithZeros(d, b), '')
        ).
        
    '', '', space = clearCarry(space);
    '', n, space | n, '', space = appendDigitWithCarry(n, space);
    
    "main integer addition rule"
    n, m, $space = add(
        getAllButLastCharacter(n), 
        getAllButLastCharacter(m), 
        appendDigitWithCarry(
            naiveAdd(
                getLastCharacter(n), 
                getLastCharacter(m)
            ), 
            space
        )
    );
    
    "adding two negative numbers"
    '-'n, '-'m = '-'add(n, m);
    
    "adding two decimals"
    a '\.' b, c '\.' d = addDecimals(
    	stripLeadingZeros(a), b, stripLeadingZeros(c), d);
    
    "adding a decimal to an integer"
    whole '\.' part, m | m, whole '\.' part = add(
    	stripLeadingZeros(whole), stripLeadingZeros(m)) '.' part;
    
    "entry point"
    n, m = add(stripLeadingZeros(n), stripLeadingZeros(m), '').